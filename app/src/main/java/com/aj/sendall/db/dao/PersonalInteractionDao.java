package com.aj.sendall.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.aj.sendall.db.converters.FileStatusToIntConverter;
import com.aj.sendall.db.enums.FileStatus;

import com.aj.sendall.db.model.PersonalInteraction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSONAL_INTERACTION".
*/
public class PersonalInteractionDao extends AbstractDao<PersonalInteraction, Long> {

    public static final String TABLENAME = "PERSONAL_INTERACTION";

    /**
     * Properties of entity PersonalInteraction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PersonalInteractionId = new Property(0, Long.class, "personalInteractionId", true, "PERSONAL_INTERACTION_ID");
        public final static Property ConnectionId = new Property(1, long.class, "connectionId", false, "CONNECTION_ID");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property MediaType = new Property(3, int.class, "mediaType", false, "MEDIA_TYPE");
        public final static Property FileStatus = new Property(4, Integer.class, "fileStatus", false, "FILE_STATUS");
        public final static Property ModifiedTime = new Property(5, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property FileName = new Property(6, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(7, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property BytesTransfered = new Property(8, Long.class, "bytesTransfered", false, "BYTES_TRANSFERED");
        public final static Property TransactionId = new Property(9, Long.class, "transactionId", false, "TRANSACTION_ID");
    }

    private final FileStatusToIntConverter fileStatusConverter = new FileStatusToIntConverter();
    private Query<PersonalInteraction> connections_PersonalIntersQuery;

    public PersonalInteractionDao(DaoConfig config) {
        super(config);
    }
    
    public PersonalInteractionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSONAL_INTERACTION\" (" + //
                "\"PERSONAL_INTERACTION_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: personalInteractionId
                "\"CONNECTION_ID\" INTEGER NOT NULL ," + // 1: connectionId
                "\"FILE_PATH\" TEXT NOT NULL ," + // 2: filePath
                "\"MEDIA_TYPE\" INTEGER NOT NULL ," + // 3: mediaType
                "\"FILE_STATUS\" INTEGER," + // 4: fileStatus
                "\"MODIFIED_TIME\" INTEGER NOT NULL ," + // 5: modifiedTime
                "\"FILE_NAME\" TEXT NOT NULL ," + // 6: fileName
                "\"FILE_SIZE\" INTEGER," + // 7: fileSize
                "\"BYTES_TRANSFERED\" INTEGER," + // 8: bytesTransfered
                "\"TRANSACTION_ID\" INTEGER);"); // 9: transactionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSONAL_INTERACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonalInteraction entity) {
        stmt.clearBindings();
 
        Long personalInteractionId = entity.getPersonalInteractionId();
        if (personalInteractionId != null) {
            stmt.bindLong(1, personalInteractionId);
        }
        stmt.bindLong(2, entity.getConnectionId());
        stmt.bindString(3, entity.getFilePath());
        stmt.bindLong(4, entity.getMediaType());
 
        FileStatus fileStatus = entity.getFileStatus();
        if (fileStatus != null) {
            stmt.bindLong(5, fileStatusConverter.convertToDatabaseValue(fileStatus));
        }
        stmt.bindLong(6, entity.getModifiedTime().getTime());
        stmt.bindString(7, entity.getFileName());
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(8, fileSize);
        }
 
        Long bytesTransfered = entity.getBytesTransfered();
        if (bytesTransfered != null) {
            stmt.bindLong(9, bytesTransfered);
        }
 
        Long transactionId = entity.getTransactionId();
        if (transactionId != null) {
            stmt.bindLong(10, transactionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonalInteraction entity) {
        stmt.clearBindings();
 
        Long personalInteractionId = entity.getPersonalInteractionId();
        if (personalInteractionId != null) {
            stmt.bindLong(1, personalInteractionId);
        }
        stmt.bindLong(2, entity.getConnectionId());
        stmt.bindString(3, entity.getFilePath());
        stmt.bindLong(4, entity.getMediaType());
 
        FileStatus fileStatus = entity.getFileStatus();
        if (fileStatus != null) {
            stmt.bindLong(5, fileStatusConverter.convertToDatabaseValue(fileStatus));
        }
        stmt.bindLong(6, entity.getModifiedTime().getTime());
        stmt.bindString(7, entity.getFileName());
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(8, fileSize);
        }
 
        Long bytesTransfered = entity.getBytesTransfered();
        if (bytesTransfered != null) {
            stmt.bindLong(9, bytesTransfered);
        }
 
        Long transactionId = entity.getTransactionId();
        if (transactionId != null) {
            stmt.bindLong(10, transactionId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PersonalInteraction readEntity(Cursor cursor, int offset) {
        PersonalInteraction entity = new PersonalInteraction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // personalInteractionId
            cursor.getLong(offset + 1), // connectionId
            cursor.getString(offset + 2), // filePath
            cursor.getInt(offset + 3), // mediaType
            cursor.isNull(offset + 4) ? null : fileStatusConverter.convertToEntityProperty(cursor.getInt(offset + 4)), // fileStatus
            new java.util.Date(cursor.getLong(offset + 5)), // modifiedTime
            cursor.getString(offset + 6), // fileName
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // fileSize
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // bytesTransfered
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // transactionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonalInteraction entity, int offset) {
        entity.setPersonalInteractionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConnectionId(cursor.getLong(offset + 1));
        entity.setFilePath(cursor.getString(offset + 2));
        entity.setMediaType(cursor.getInt(offset + 3));
        entity.setFileStatus(cursor.isNull(offset + 4) ? null : fileStatusConverter.convertToEntityProperty(cursor.getInt(offset + 4)));
        entity.setModifiedTime(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFileName(cursor.getString(offset + 6));
        entity.setFileSize(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setBytesTransfered(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setTransactionId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PersonalInteraction entity, long rowId) {
        entity.setPersonalInteractionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PersonalInteraction entity) {
        if(entity != null) {
            return entity.getPersonalInteractionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonalInteraction entity) {
        return entity.getPersonalInteractionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "personalInters" to-many relationship of Connections. */
    public List<PersonalInteraction> _queryConnections_PersonalInters(long connectionId) {
        synchronized (this) {
            if (connections_PersonalIntersQuery == null) {
                QueryBuilder<PersonalInteraction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ConnectionId.eq(null));
                connections_PersonalIntersQuery = queryBuilder.build();
            }
        }
        Query<PersonalInteraction> query = connections_PersonalIntersQuery.forCurrentThread();
        query.setParameter(0, connectionId);
        return query.list();
    }

}
