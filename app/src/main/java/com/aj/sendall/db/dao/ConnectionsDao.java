package com.aj.sendall.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.aj.sendall.db.model.Connections;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONNECTIONS".
*/
public class ConnectionsDao extends AbstractDao<Connections, Long> {

    public static final String TABLENAME = "CONNECTIONS";

    /**
     * Properties of entity Connections.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ConnectionId = new Property(0, Long.class, "connectionId", true, "CONNECTION_ID");
        public final static Property ConnectionName = new Property(1, String.class, "connectionName", false, "CONNECTION_NAME");
        public final static Property SSID = new Property(2, String.class, "SSID", false, "SSID");
        public final static Property ProfPicPath = new Property(3, String.class, "profPicPath", false, "PROF_PIC_PATH");
        public final static Property LastContaced = new Property(4, java.util.Date.class, "lastContaced", false, "LAST_CONTACED");
    }

    private DaoSession daoSession;


    public ConnectionsDao(DaoConfig config) {
        super(config);
    }
    
    public ConnectionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONNECTIONS\" (" + //
                "\"CONNECTION_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: connectionId
                "\"CONNECTION_NAME\" TEXT NOT NULL ," + // 1: connectionName
                "\"SSID\" TEXT NOT NULL ," + // 2: SSID
                "\"PROF_PIC_PATH\" TEXT," + // 3: profPicPath
                "\"LAST_CONTACED\" INTEGER);"); // 4: lastContaced
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONNECTIONS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Connections entity) {
        stmt.clearBindings();
 
        Long connectionId = entity.getConnectionId();
        if (connectionId != null) {
            stmt.bindLong(1, connectionId);
        }
        stmt.bindString(2, entity.getConnectionName());
        stmt.bindString(3, entity.getSSID());
 
        String profPicPath = entity.getProfPicPath();
        if (profPicPath != null) {
            stmt.bindString(4, profPicPath);
        }
 
        java.util.Date lastContaced = entity.getLastContaced();
        if (lastContaced != null) {
            stmt.bindLong(5, lastContaced.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Connections entity) {
        stmt.clearBindings();
 
        Long connectionId = entity.getConnectionId();
        if (connectionId != null) {
            stmt.bindLong(1, connectionId);
        }
        stmt.bindString(2, entity.getConnectionName());
        stmt.bindString(3, entity.getSSID());
 
        String profPicPath = entity.getProfPicPath();
        if (profPicPath != null) {
            stmt.bindString(4, profPicPath);
        }
 
        java.util.Date lastContaced = entity.getLastContaced();
        if (lastContaced != null) {
            stmt.bindLong(5, lastContaced.getTime());
        }
    }

    @Override
    protected final void attachEntity(Connections entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Connections readEntity(Cursor cursor, int offset) {
        Connections entity = new Connections( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // connectionId
            cursor.getString(offset + 1), // connectionName
            cursor.getString(offset + 2), // SSID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // profPicPath
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // lastContaced
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Connections entity, int offset) {
        entity.setConnectionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConnectionName(cursor.getString(offset + 1));
        entity.setSSID(cursor.getString(offset + 2));
        entity.setProfPicPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastContaced(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Connections entity, long rowId) {
        entity.setConnectionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Connections entity) {
        if(entity != null) {
            return entity.getConnectionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Connections entity) {
        return entity.getConnectionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
